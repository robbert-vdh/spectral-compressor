cmake_minimum_required(VERSION 3.15)

project(spectral_compressor VERSION 0.0.1 LANGUAGES CXX)

# TODO: Figure out a clean way to allow maintainers to disable all static
#       linking and downloading
option(FORCE_STATIC_LINKING "Statically link all dependencies, for distribution" OFF)

# CMake for some reason doesn't enable diagnostic colors by default
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  add_compile_options(-fdiagnostics-color=always)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  add_compile_options(-fcolor-diagnostics)
endif()

# Statically link the STL on Windows for the CI builds, and target a lower macOS version
if(FORCE_STATIC_LINKING)
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
  set(CMAKE_OSX_DEPLOYMENT_TARGET "10.13")
endif()

#
# Dependencies
#

# Fetch JUCE and other dependencies. For non-JUCE dependencies we'll check
# whether the package is available locally with pkgconfig before trying to
# download and build it ourselves.
include(cmake/CPM.cmake)
# This is 6.0.8 with a number of additional commits from the develop branch with
# with Linux fixes, most notably a fix for
# https://forum.juce.com/t/messages-are-only-being-handled-while-the-editor-is-open/45165/11
CPMAddPackage("gh:juce-framework/JUCE#1a5fb5992a1a4e28e998708ed8dce2cc864a30d7")

if(NOT FORCE_STATIC_LINKING)
  find_package(PkgConfig)
  if(PkgConfig_FOUND)
    pkg_search_module(FFTW IMPORTED_TARGET fftw3f)
    pkg_search_module(function2 IMPORTED_TARGET function2)
  endif()
endif()

# Either dynamically link to the system FFTW, or statically link for
# distribution (FFTW also seems to rarely be shipped with static archives)
if(FFTW_FOUND AND NOT FORCE_STATIC_LINKING)
  set(fftw_target PkgConfig::FFTW)
  set(use_shared_fftw TRUE)
else()
  message(STATUS "fftw3f not found using pkgconfig, falling back to a statically linked local build")

  CPMAddPackage(
    NAME FFTW
    VERSIOIN 3.3.9
    URL http://fftw.org/fftw-3.3.9.tar.gz
    URL_HASH SHA256=bf2c7ce40b04ae811af714deb512510cc2c17b9ab9d6ddcf49fe4487eea7af3d
    OPTIONS
    "BUILD_SHARED_LIBS OFF"
    "BUILD_TESTS OFF"
    "ENABLE_FLOAT ON"
    "ENABLE_AVX ON"
    "ENABLE_AVX2 OFF"
  )

  # CMake builds static libraries without -fPIC by default
  set_target_properties(fftw3f PROPERTIES POSITION_INDEPENDENT_CODE ON)
  set(fftw_target fftw3f)
  set(use_static_fftw TRUE)
endif()

if(NOT function2_FOUND)
  message(STATUS "function2 not found using pkgconfig, downloading from GitHub")
  CPMAddPackage("gh:Naios/function2#4.1.0")
endif()

#
# Plugins
#

juce_add_plugin(SpectralCompressor
  PRODUCT_NAME "Spectral Compressor"
  COMPANY_NAME "Robbert van der Helm"
  FORMATS VST3 AU

  PLUGIN_MANUFACTURER_CODE RvdH
  PLUGIN_CODE Spcc

  IS_SYNTH FALSE
  NEEDS_MIDI_INPUT FALSE
  NEEDS_MIDI_OUTPUT FALSE
  IS_MIDI_EFFECT FALSE
  EDITOR_WANTS_KEYBOARD_FOCUS FALSE

  VST3_CATEGORIES Fx Dynamics)

target_sources(SpectralCompressor PRIVATE
  src/editor.cpp
  src/processor.cpp
  src/utils.cpp)

target_compile_definitions(SpectralCompressor PUBLIC
  JUCE_WEB_BROWSER=0
  JUCE_USE_CURL=0
  JUCE_VST3_CAN_REPLACE_VST2=0
  # We're licensed under the GPL
  JUCE_DISPLAY_SPLASH_SCREEN=0
  $<$<BOOL:${use_shared_fftw}>:JUCE_DSP_USE_SHARED_FFTW=1>
  $<$<BOOL:${use_static_fftw}>:JUCE_DSP_USE_STATIC_FFTW=1>)

target_compile_features(SpectralCompressor PUBLIC cxx_std_20)
set_target_properties(SpectralCompressor PROPERTIES CXX_EXTENSIONS OFF)

# Statically link the STL on Linux for the CI builds
if(FORCE_STATIC_LINKING AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(SpectralCompressor PRIVATE -static-libstdc++)
endif()

target_link_libraries(SpectralCompressor
  PUBLIC
    juce::juce_recommended_warning_flags
    juce::juce_recommended_lto_flags
    juce::juce_recommended_config_flags

  PRIVATE
    juce::juce_audio_utils
    juce::juce_dsp
    ${fftw_target}
    function2)
